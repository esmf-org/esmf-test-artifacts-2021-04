  Beginning Test, file ESMF_ArrayCreateGetUTest.F90, line 97
  Beginning Test, file ESMF_ArrayCreateGetUTest.F90, line 97
  NUMBER_OF_PROCESSORS           4
  Beginning Test, file ESMF_ArrayCreateGetUTest.F90, line 97
  NUMBER_OF_PROCESSORS           4
  Beginning Test, file ESMF_ArrayCreateGetUTest.F90, line 97
  NUMBER_OF_PROCESSORS           4
  NUMBER_OF_PROCESSORS           4
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F90, line 118
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F90, line 125
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F90, line 118
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F90, line 125
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F90, line 118
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F90, line 125
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F90, line 118
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F90, line 125
  PASS  Create test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 143
  PASS  Create test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 143
  PASS  Create test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 143
  PASS  Create test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 143
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90, line 150
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90, line 150
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90, line 150
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90, line 150
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90, line 157
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90, line 157
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90, line 157
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90, line 157
  PASS  Destroy test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 164
  PASS  Destroy test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 164
  PASS  Destroy test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 164
  PASS  Destroy test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 164
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F90, line 171
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F90, line 171
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F90, line 171
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F90, line 171
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F90, line 178
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F90, line 178
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F90, line 178
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F90, line 178
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 186
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 186
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 186
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 186
  PASS  Array equality before assignment Test, ESMF_ArrayCreateGetUTest.F90, line 193
  PASS  Array equality before assignment Test, ESMF_ArrayCreateGetUTest.F90, line 193
  PASS  Array equality before assignment Test, ESMF_ArrayCreateGetUTest.F90, line 193
  PASS  Array assignment and equality Test, ESMF_ArrayCreateGetUTest.F90, line 202
  PASS  Array equality before assignment Test, ESMF_ArrayCreateGetUTest.F90, line 193
  PASS  Array assignment and equality Test, ESMF_ArrayCreateGetUTest.F90, line 202
  PASS  Array assignment and equality Test, ESMF_ArrayCreateGetUTest.F90, line 202
  PASS  Array assignment and equality Test, ESMF_ArrayCreateGetUTest.F90, line 202
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 209
  PASS  Array equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 217
  PASS  Array non-equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 225
  PASS  Double ArrayDestroy through alias Test, ESMF_ArrayCreateGetUTest.F90, line 232
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 209
  PASS  Array equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 217
  PASS  Array non-equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 225
  PASS  Double ArrayDestroy through alias Test, ESMF_ArrayCreateGetUTest.F90, line 232
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 209
  PASS  Array equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 217
  PASS  Array non-equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 225
  PASS  Double ArrayDestroy through alias Test, ESMF_ArrayCreateGetUTest.F90, line 232
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 rank inconsistency Test, ESMF_ArrayCreateGetUTest.F90, line 241
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 249
  PASS  ArraySet Test, ESMF_ArrayCreateGetUTest.F90, line 256
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 263
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test w/ ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 277
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 285
--- ESMCI::Array::print start ---
 Base name    = MyArray with ArraySpec
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 209
  PASS  Array equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 217
  PASS  Array non-equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 225
  PASS  Double ArrayDestroy through alias Test, ESMF_ArrayCreateGetUTest.F90, line 232
Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x17b3040:
            rank = 2, typekind = 6, base_addr = 0x17b3370
            dim[0] = 7  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 9, 1) =  2.35685e-310
(10, 1) =  2.35685e-310
(11, 1) =  0
(12, 1) =  0
(13, 1) =  0
(14, 1) =  0
(15, 1) =  0
( 9, 2) =  0
(10, 2) =  0
(11, 2) =  0
  skipping to end ...
(13,11) =  0
(14,11) =  0
(15,11) =  0
( 9,12) =  0
(10,12) =  0
(11,12) =  0
(12,12) =  0
(13,12) =  0
(14,12) =  0
(15,12) =  0
dim 1: [0]: [9 [9 [9, 15] 15] 15]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 292
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 rank inconsistency Test, ESMF_ArrayCreateGetUTest.F90, line 241
 Array name: MyArray with ArraySpec                                                          
  PASS  ArrayGet arrayspec and name, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 300
  PASS  Verify ArraySpec returned from Array, ESMF_ArrayCreateGetUTest.F90, line 306
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 249
  PASS  Verify name returned from Array, ESMF_ArrayCreateGetUTest.F90, line 312
  PASS  ArraySet Test, ESMF_ArrayCreateGetUTest.F90, line 256
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 319
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 263
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test w/ ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 277
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 285
--- ESMCI::Array::print start ---
 Base name    = MyArray with ArraySpec
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x1cfdbf0:
            rank = 2, typekind = 6, base_addr = 0x1cfdf20
            dim[0] = 8  dim[1] = 11  
  Real, *8, Dim 2, Data values:
( 1,13) =  2.33767e-310
( 2,13) =  2.33767e-310
( 3,13) =  0
( 4,13) =  0
( 5,13) =  0
( 6,13) =  0
( 7,13) =  0
( 8,13) =  0
( 1,14) =  0
( 2,14) =  0
  skipping to end ...
( 7,22) =  0
( 8,22) =  0
( 1,23) =  0
( 2,23) =  0
( 3,23) =  0
( 4,23) =  0
( 5,23) =  0
( 6,23) =  0
( 7,23) =  0
( 8,23) =  0
dim 1: [0]: [1 [1 [1, 8] 8] 8]
dim 2: [1]: [13 [13 [13, 23] 23] 23]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 292
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 rank inconsistency Test, ESMF_ArrayCreateGetUTest.F90, line 241
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 rank inconsistency Test, ESMF_ArrayCreateGetUTest.F90, line 241
 Array name: MyArray with ArraySpec                                                          
  PASS  ArrayGet arrayspec and name, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 300
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 249
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 249
  PASS  Verify ArraySpec returned from Array, ESMF_ArrayCreateGetUTest.F90, line 306
  PASS  Verify name returned from Array, ESMF_ArrayCreateGetUTest.F90, line 312
  PASS  ArraySet Test, ESMF_ArrayCreateGetUTest.F90, line 256
  PASS  ArraySet Test, ESMF_ArrayCreateGetUTest.F90, line 256
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 319
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 263
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 263
  PASS  Getting Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line 326
  PASS  Verify Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line 332
  PASS  ArrayCreate from Copy, uninitialized Array Test, ESMF_ArrayCreateGetUTest.F90, line 339
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test w/ ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 277
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test w/ ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 277
  PASS  ArrayCreate from Copy (ALLOC), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 347
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 285
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 285
 Array name: Array007                                                                        
  PASS  ArrayGet arrayspec from Array Copy (ALLOC) Test, ESMF_ArrayCreateGetUTest.F90, line 355
--- ESMCI::Array::print start ---
--- ESMCI::Array::print start ---
 Base name    = MyArray with ArraySpec
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
  PASS  Verify ArraySpec returned from Array (ALLOC) Copy, ESMF_ArrayCreateGetUTest.F90, line 361
 Base name    = MyArray with ArraySpec
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
  PASS  ArrayGet Fortran array pointer, from Array Copy (ALLOC) Test, ESMF_ArrayCreateGetUTest.F90, line 368
{}{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 3 ~
Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0xf07dd0:
            rank = 2, typekind = 6, base_addr = 0xf08100
            dim[0] = 8  dim[1] = 12  
LocalArrayPrint: Array at address 0xfa4bc0:
            rank = 2, typekind = 6, base_addr = 0xfa4ef0
            dim[0] = 7  dim[1] = 11  
  Real, *8, Dim 2, Data values:
  Real, *8, Dim 2, Data values:
( 9,13) =  2.35952e-310
(10,13) =  2.35952e-310
(11,13) =  0
(12,13) =  0
(13,13) =  0
( 1, 1) =  2.34537e-310
( 2, 1) =  2.34537e-310
( 3, 1) =  0
(14,13) =  0
(15,13) =  0
( 9,14) =  0
(10,14) =  0
(11,14) =  0
  skipping to end ...
( 4, 1) =  0
( 5, 1) =  0
( 6, 1) =  0
( 7, 1) =  0
( 8, 1) =  0
( 1, 2) =  0
( 2, 2) =  0
(13,22) =  0
(14,22) =  0
(15,22) =  0
( 9,23) =  0
(10,23) =  0
(11,23) =  0
(12,23) =  0
  PASS  Getting Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line 326
  skipping to end ...
( 7,11) =  0
( 8,11) =  0
( 1,12) =  0
( 2,12) =  0
( 3,12) =  0
( 4,12) =  0
( 5,12) =  0
  PASS  Verify Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line 332
(13,23) =  0
(14,23) =  0
(15,23) =  0
dim 1: [0]: [9 [9 [9, 15] 15] 15]
dim 2: [1]: [13 [13 [13, 23] 23] 23]
--- ESMCI::Array::print end ---
( 6,12) =  0
( 7,12) =  0
( 8,12) =  0
dim 1: [0]: [1 [1 [1, 8] 8] 8]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 292
  PASS  ArrayCreate from Copy, uninitialized Array Test, ESMF_ArrayCreateGetUTest.F90, line 339
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 292
 Array name: MyArray with ArraySpec                                                          
  PASS  ArrayGet arrayspec and name, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 300
 Array name: MyArray with ArraySpec                                                          
  PASS  ArrayGet arrayspec and name, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 300
  PASS  ArrayCreate from Copy (ALLOC), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 347
  PASS  Verify ArraySpec returned from Array, ESMF_ArrayCreateGetUTest.F90, line 306
  PASS  Verify ArraySpec returned from Array, ESMF_ArrayCreateGetUTest.F90, line 306
  PASS  Verify name returned from Array, ESMF_ArrayCreateGetUTest.F90, line 312
  PASS  Verify name returned from Array, ESMF_ArrayCreateGetUTest.F90, line 312
 Array name: Array007                                                                        
  PASS  ArrayGet arrayspec from Array Copy (ALLOC) Test, ESMF_ArrayCreateGetUTest.F90, line 355
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 319
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 319
  PASS  Verify ArraySpec returned from Array (ALLOC) Copy, ESMF_ArrayCreateGetUTest.F90, line 361
  PASS  ArrayGet Fortran array pointer, from Array Copy (ALLOC) Test, ESMF_ArrayCreateGetUTest.F90, line 368
  PASS  Getting Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line 326
  PASS  Getting Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line 326
  PASS  Verify Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line 332
  PASS  Verify Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line 332
  PASS  ArrayCreate from Copy, uninitialized Array Test, ESMF_ArrayCreateGetUTest.F90, line 339
  PASS  ArrayCreate from Copy, uninitialized Array Test, ESMF_ArrayCreateGetUTest.F90, line 339
  PASS  ArrayCreate from Copy (ALLOC), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 347
  PASS  ArrayCreate from Copy (ALLOC), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 347
 Array name: Array007                                                                        
  PASS  ArrayGet arrayspec from Array Copy (ALLOC) Test, ESMF_ArrayCreateGetUTest.F90, line 355
 Array name: Array007                                                                        
  PASS  ArrayGet arrayspec from Array Copy (ALLOC) Test, ESMF_ArrayCreateGetUTest.F90, line 355
  PASS  Verify Array vs Array Copy (ALLOC) no data copy, ESMF_ArrayCreateGetUTest.F90, line 384
  PASS  Verify ArraySpec returned from Array (ALLOC) Copy, ESMF_ArrayCreateGetUTest.F90, line 361
  PASS  Verify ArraySpec returned from Array (ALLOC) Copy, ESMF_ArrayCreateGetUTest.F90, line 361
  PASS  ArrayGet Fortran array pointer, from Array Copy (ALLOC) Test, ESMF_ArrayCreateGetUTest.F90, line 368
  PASS  ArrayGet Fortran array pointer, from Array Copy (ALLOC) Test, ESMF_ArrayCreateGetUTest.F90, line 368
  PASS  Verify Array vs Array Copy (ALLOC) no data copy, ESMF_ArrayCreateGetUTest.F90, line 384
  PASS  Verify Array vs Array Copy (ALLOC) no data copy, ESMF_ArrayCreateGetUTest.F90, line 384
  PASS  Verify Array vs Array Copy (ALLOC) separate memory allocation, ESMF_ArrayCreateGetUTest.F90, line 402
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 409
--- ESMCI::Array::print start ---
 Base name    = Array007
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x17b3fa0:
            rank = 2, typekind = 6, base_addr = 0x17b42d0
            dim[0] = 7  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 9, 1) =  101
(10, 1) =  101
(11, 1) =  101
(12, 1) =  101
(13, 1) =  101
(14, 1) =  101
(15, 1) =  101
( 9, 2) =  101
(10, 2) =  101
(11, 2) =  101
  skipping to end ...
(13,11) =  101
(14,11) =  101
(15,11) =  101
( 9,12) =  101
(10,12) =  101
(11,12) =  101
(12,12) =  101
(13,12) =  101
  PASS  Verify Array vs Array Copy (ALLOC) no data copy, ESMF_ArrayCreateGetUTest.F90, line 384
(14,12) =  101
(15,12) =  101
dim 1: [0]: [9 [9 [9, 15] 15] 15]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint from Copy (ALLOC) after original destroy, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 416
  PASS  ArrayDestroy of Copy (ALLOC) Test, ESMF_ArrayCreateGetUTest.F90, line 423
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 431
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 438
  PASS  ArrayCreate from Copy (VALUE), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 446
 Array name: Array009                                                                        
  PASS  ArrayGet arrayspec from Array Copy (VALUE) Test, ESMF_ArrayCreateGetUTest.F90, line 454
  PASS  Verify ArraySpec returned from Array (VALUE) Copy, ESMF_ArrayCreateGetUTest.F90, line 460
  PASS  ArrayGet Fortran array pointer, from Array Copy (VALUE) Test, ESMF_ArrayCreateGetUTest.F90, line 467
  PASS  Verify Array vs Array Copy (ALLOC) separate memory allocation, ESMF_ArrayCreateGetUTest.F90, line 402
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 409
--- ESMCI::Array::print start ---
 Base name    = Array007
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x1cfeb70:
            rank = 2, typekind = 6, base_addr = 0x1cfeea0
            dim[0] = 8  dim[1] = 11  
  Real, *8, Dim 2, Data values:
( 1,13) =  102
( 2,13) =  102
( 3,13) =  102
( 4,13) =  102
( 5,13) =  102
( 6,13) =  102
( 7,13) =  102
( 8,13) =  102
( 1,14) =  102
( 2,14) =  102
  skipping to end ...
( 7,22) =  102
( 8,22) =  102
( 1,23) =  102
( 2,23) =  102
( 3,23) =  102
( 4,23) =  102
( 5,23) =  102
( 6,23) =  102
( 7,23) =  102
( 8,23) =  102
dim 1: [0]: [1 [1 [1, 8] 8] 8]
dim 2: [1]: [13 [13 [13, 23] 23] 23]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint from Copy (ALLOC) after original destroy, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 416
  PASS  ArrayDestroy of Copy (ALLOC) Test, ESMF_ArrayCreateGetUTest.F90, line 423
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 431
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 438
  PASS  ArrayCreate from Copy (VALUE), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 446
 Array name: Array009                                                                        
  PASS  ArrayGet arrayspec from Array Copy (VALUE) Test, ESMF_ArrayCreateGetUTest.F90, line 454
  PASS  Verify ArraySpec returned from Array (VALUE) Copy, ESMF_ArrayCreateGetUTest.F90, line 460
  PASS  ArrayGet Fortran array pointer, from Array Copy (VALUE) Test, ESMF_ArrayCreateGetUTest.F90, line 467
  PASS  Verify Array vs Array Copy (ALLOC) separate memory allocation, ESMF_ArrayCreateGetUTest.F90, line 402
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 409
--- ESMCI::Array::print start ---
 Base name    = Array007
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0xfa5ae0:
            rank = 2, typekind = 6, base_addr = 0xfa5e10
            dim[0] = 7  dim[1] = 11  
  Real, *8, Dim 2, Data values:
( 9,13) =  103
(10,13) =  103
(11,13) =  103
(12,13) =  103
(13,13) =  103
(14,13) =  103
(15,13) =  103
( 9,14) =  103
(10,14) =  103
(11,14) =  103
  skipping to end ...
(13,22) =  103
(14,22) =  103
(15,22) =  103
( 9,23) =  103
(10,23) =  103
(11,23) =  103
(12,23) =  103
(13,23) =  103
(14,23) =  103
(15,23) =  103
dim 1: [0]: [9 [9 [9, 15] 15] 15]
dim 2: [1]: [13 [13 [13, 23] 23] 23]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint from Copy (ALLOC) after original destroy, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 416
  PASS  ArrayDestroy of Copy (ALLOC) Test, ESMF_ArrayCreateGetUTest.F90, line 423
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 431
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 438
  PASS  ArrayCreate from Copy (VALUE), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 446
  PASS  Verify Array vs Array Copy (ALLOC) separate memory allocation, ESMF_ArrayCreateGetUTest.F90, line 402
 Array name: Array009                                                                        
  PASS  ArrayGet arrayspec from Array Copy (VALUE) Test, ESMF_ArrayCreateGetUTest.F90, line 454
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 409
  PASS  Verify ArraySpec returned from Array (VALUE) Copy, ESMF_ArrayCreateGetUTest.F90, line 460
--- ESMCI::Array::print start ---
 Base name    = Array007
  PASS  ArrayGet Fortran array pointer, from Array Copy (VALUE) Test, ESMF_ArrayCreateGetUTest.F90, line 467
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0xf08d90:
            rank = 2, typekind = 6, base_addr = 0xf090c0
            dim[0] = 8  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 1, 1) =  100
( 2, 1) =  100
( 3, 1) =  100
( 4, 1) =  100
( 5, 1) =  100
( 6, 1) =  100
( 7, 1) =  100
( 8, 1) =  100
( 1, 2) =  100
( 2, 2) =  100
  skipping to end ...
( 7,11) =  100
( 8,11) =  100
( 1,12) =  100
( 2,12) =  100
( 3,12) =  100
( 4,12) =  100
( 5,12) =  100
( 6,12) =  100
( 7,12) =  100
( 8,12) =  100
dim 1: [0]: [1 [1 [1, 8] 8] 8]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint from Copy (ALLOC) after original destroy, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 416
  PASS  Verify Array vs Array Copy (VALUE) data copy, ESMF_ArrayCreateGetUTest.F90, line 483
  PASS  ArrayDestroy of Copy (ALLOC) Test, ESMF_ArrayCreateGetUTest.F90, line 423
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 431
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 438
  PASS  ArrayCreate from Copy (VALUE), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 446
 Array name: Array009                                                                        
  PASS  ArrayGet arrayspec from Array Copy (VALUE) Test, ESMF_ArrayCreateGetUTest.F90, line 454
  PASS  Verify ArraySpec returned from Array (VALUE) Copy, ESMF_ArrayCreateGetUTest.F90, line 460
  PASS  ArrayGet Fortran array pointer, from Array Copy (VALUE) Test, ESMF_ArrayCreateGetUTest.F90, line 467
  PASS  Verify Array vs Array Copy (VALUE) data copy, ESMF_ArrayCreateGetUTest.F90, line 483
  PASS  Verify Array vs Array Copy (VALUE) data copy, ESMF_ArrayCreateGetUTest.F90, line 483
  PASS  Verify Array vs Array Copy (VALUE) separate memory allocation, ESMF_ArrayCreateGetUTest.F90, line 501
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 508
  PASS  ArrayDestroy of Copy (VALUE) Test, ESMF_ArrayCreateGetUTest.F90, line 515
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 523
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 530
  PASS  ArrayCreate from Copy (REF), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 538
 Array name: Array011                                                                        
  PASS  ArrayGet arrayspec from Array Copy (REF) Test, ESMF_ArrayCreateGetUTest.F90, line 546
  PASS  Verify ArraySpec returned from Array Copy (REF), ESMF_ArrayCreateGetUTest.F90, line 552
  PASS  ArrayGet Fortran array pointer, from Array Copy (REF) Test, ESMF_ArrayCreateGetUTest.F90, line 559
  PASS  Verify Array vs Array Copy (VALUE) data copy, ESMF_ArrayCreateGetUTest.F90, line 483
  PASS  Verify Array vs Array Copy (VALUE) separate memory allocation, ESMF_ArrayCreateGetUTest.F90, line 501
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 508
  PASS  ArrayDestroy of Copy (VALUE) Test, ESMF_ArrayCreateGetUTest.F90, line 515
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 523
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 530
  PASS  Verify Array vs Array Copy (VALUE) separate memory allocation, ESMF_ArrayCreateGetUTest.F90, line 501
  PASS  ArrayCreate from Copy (REF), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 538
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 508
 Array name: Array011                                                                        
  PASS  ArrayGet arrayspec from Array Copy (REF) Test, ESMF_ArrayCreateGetUTest.F90, line 546
  PASS  ArrayDestroy of Copy (VALUE) Test, ESMF_ArrayCreateGetUTest.F90, line 515
  PASS  Verify ArraySpec returned from Array Copy (REF), ESMF_ArrayCreateGetUTest.F90, line 552
  PASS  ArrayGet Fortran array pointer, from Array Copy (REF) Test, ESMF_ArrayCreateGetUTest.F90, line 559
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 523
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 530
  PASS  ArrayCreate from Copy (REF), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 538
 Array name: Array011                                                                        
  PASS  ArrayGet arrayspec from Array Copy (REF) Test, ESMF_ArrayCreateGetUTest.F90, line 546
  PASS  Verify ArraySpec returned from Array Copy (REF), ESMF_ArrayCreateGetUTest.F90, line 552
  PASS  ArrayGet Fortran array pointer, from Array Copy (REF) Test, ESMF_ArrayCreateGetUTest.F90, line 559
  PASS  Verify Array vs Array Copy (REF) shared allocation Test1, ESMF_ArrayCreateGetUTest.F90, line 575
  PASS  Verify Array vs Array Copy (VALUE) separate memory allocation, ESMF_ArrayCreateGetUTest.F90, line 501
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 508
  PASS  ArrayDestroy of Copy (VALUE) Test, ESMF_ArrayCreateGetUTest.F90, line 515
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 523
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 530
  PASS  ArrayCreate from Copy (REF), 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 538
 Array name: Array011                                                                        
  PASS  ArrayGet arrayspec from Array Copy (REF) Test, ESMF_ArrayCreateGetUTest.F90, line 546
  PASS  Verify ArraySpec returned from Array Copy (REF), ESMF_ArrayCreateGetUTest.F90, line 552
  PASS  ArrayGet Fortran array pointer, from Array Copy (REF) Test, ESMF_ArrayCreateGetUTest.F90, line 559
  PASS  Verify Array vs Array Copy (REF) shared allocation Test1, ESMF_ArrayCreateGetUTest.F90, line 575
  PASS  Verify Array vs Array Copy (REF) shared allocation Test1, ESMF_ArrayCreateGetUTest.F90, line 575
  PASS  Verify Array vs Array Copy (REF) shared allocation Test2, ESMF_ArrayCreateGetUTest.F90, line 593
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 600
  PASS  ArrayDestroy of Copy Test, ESMF_ArrayCreateGetUTest.F90, line 607
  PASS  Verify Array vs Array Copy (REF) shared allocation Test2, ESMF_ArrayCreateGetUTest.F90, line 593
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 600
  PASS  ArrayDestroy of Copy Test, ESMF_ArrayCreateGetUTest.F90, line 607
  PASS  Verify Array vs Array Copy (REF) shared allocation Test2, ESMF_ArrayCreateGetUTest.F90, line 593
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 600
  PASS  ArrayDestroy of Copy Test, ESMF_ArrayCreateGetUTest.F90, line 607
  PASS  Verify Array vs Array Copy (REF) shared allocation Test1, ESMF_ArrayCreateGetUTest.F90, line 575
  PASS  ArrayCreate from Ptr with 3D farray on 2D DistGrid Test as Ptr, ESMF_ArrayCreateGetUTest.F90, line 616
--- ESMCI::Array::print start ---
 Base name    = MyArray
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*4 / 3 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x17b5c00:
            rank = 3, typekind = 5, base_addr = 0x17b6170
            dim[0] = 9  dim[1] = 12  dim[2] = 8  
  Real, *4, Dim 3, Data values:
(-2, 1, 3) =  -126107
(-1, 1, 3) =  1.55628e-41
( 0, 1, 3) =  -126107
( 1, 1, 3) =  1.55628e-41
( 2, 1, 3) =  4.61713e-38
( 3, 1, 3) =  0
( 4, 1, 3) =  4.61713e-38
( 5, 1, 3) =  0
( 6, 1, 3) =  4.61715e-38
(-2, 2, 3) =  0
  skipping to end ...
( 6,11,10) =  0
(-2,12,10) =  0
(-1,12,10) =  0
( 0,12,10) =  0
( 1,12,10) =  0
( 2,12,10) =  0
( 3,12,10) =  0
( 4,12,10) =  0
( 5,12,10) =  0
( 6,12,10) =  0
dim 1: [0]: [-2 [-1 [-1, 5] 5] 6]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
dim 3: undistLBound[0]=3            undistUBound[0]=10
--- ESMCI::Array::print end ---
  PASS  ArrayPrint for ArrayCreate from Ptr Test, ESMF_ArrayCreateGetUTest.F90, line 623
  PASS  ArrayGet Test, ESMF_ArrayCreateGetUTest.F90, line 630
  PASS  Deallocate returned pointer Test, ESMF_ArrayCreateGetUTest.F90, line 637
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 644
  PASS  ArrayCreate from Ptr with 3D farray on 2D DistGrid Test as Ptr, ESMF_ArrayCreateGetUTest.F90, line 616
--- ESMCI::Array::print start ---
 Base name    = MyArray
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*4 / 3 
~ lower class' values ~
DistGrid dimCount = 2
  PASS  ArrayCreate from Ptr with 3D farray on 2D DistGrid Test as Ptr, ESMF_ArrayCreateGetUTest.F90, line 616
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x1cfde90:
            rank = 3, typekind = 5, base_addr = 0x1d00a10
            dim[0] = 9  dim[1] = 12  dim[2] = 8  
  Real, *4, Dim 3, Data values:
--- ESMCI::Array::print start ---
 Base name    = MyArray
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
(-2, 1, 3) =  2.3544e+17
(-1, 1, 3) =  1.54367e-41
( 0, 1, 3) =  2.3544e+17
( 1, 1, 3) =  1.54367e-41
( 2, 1, 3) =  7.64215e-38
( 3, 1, 3) =  0
( 4, 1, 3) =  7.64215e-38
( 5, 1, 3) =  0
{}Array typekind/rank: Real*4 / 3 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
( 6, 1, 3) =  6.72623e-44
(-2, 2, 3) =  0
  skipping to end ...
( 6,11,10) =  7.64407e-38
(-2,12,10) =  0
(-1,12,10) =  7.64408e-38
localDeCount = 1
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0xfa5c60:
( 0,12,10) =  0
( 1,12,10) =  7.64408e-38
( 2,12,10) =  0
( 3,12,10) =  7.64409e-38
            rank = 3, typekind = 5, base_addr = 0xfa78e0
            dim[0] = 9  dim[1] = 12  dim[2] = 8  
  Real, *4, Dim 3, Data values:
(-2, 1, 3) =  5.04787e+14
(-1, 1, 3) =  1.5581e-41
( 4,12,10) =  0
( 5,12,10) =  7.64409e-38
( 6,12,10) =  0
dim 1: [0]: [-2 [-2 [-2, 5] 5] 6]
dim 2: [1]: [1 [1 [1, 11] 11] 12]
dim 3: undistLBound[0]=3            undistUBound[0]=10
--- ESMCI::Array::print end ---
( 0, 1, 3) =  5.04787e+14
( 1, 1, 3) =  1.5581e-41
  PASS  ArrayPrint for ArrayCreate from Ptr Test, ESMF_ArrayCreateGetUTest.F90, line 623
( 2, 1, 3) =  2.30022e-38
( 3, 1, 3) =  0
( 4, 1, 3) =  2.30022e-38
( 5, 1, 3) =  0
( 6, 1, 3) =  2.79522e+20
(-2, 2, 3) =  6.03888e+28
  skipping to end ...
  PASS  ArrayCreate with 3D farray on 2D DistGrid Test, ESMF_ArrayCreateGetUTest.F90, line 653
( 6,11,10) =  2.3007e-38
(-2,12,10) =  0
  PASS  ArrayGet Test, ESMF_ArrayCreateGetUTest.F90, line 630
  PASS  Deallocate returned pointer Test, ESMF_ArrayCreateGetUTest.F90, line 637
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 660
(-1,12,10) =  2.3007e-38
( 0,12,10) =  0
( 1,12,10) =  2.3007e-38
( 2,12,10) =  0
( 3,12,10) =  2.30071e-38
( 4,12,10) =  0
( 5,12,10) =  2.30071e-38
( 6,12,10) =  0
dim 1: [0]: [-2 [-1 [-1, 5] 5] 6]
dim 2: [1]: [1 [1 [1, 11] 11] 12]
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 644
dim 3: undistLBound[0]=3            undistUBound[0]=10
--- ESMCI::Array::print end ---
  PASS  ArrayPrint for ArrayCreate from Ptr Test, ESMF_ArrayCreateGetUTest.F90, line 623
  PASS  ArrayGet Test, ESMF_ArrayCreateGetUTest.F90, line 630
  PASS  Deallocate returned pointer Test, ESMF_ArrayCreateGetUTest.F90, line 637
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 644
  PASS  ArrayCreate with 3D farray on 2D DistGrid Test, ESMF_ArrayCreateGetUTest.F90, line 653
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, ESMF_ArrayCreateGetUTest.F90, line 671
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 660
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 678
  PASS  ArrayCreate with 3D farray on 2D DistGrid Test, ESMF_ArrayCreateGetUTest.F90, line 653
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, ESMF_ArrayCreateGetUTest.F90, line 671
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 660
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 678
  PASS  ArrayCreate with 3D farrayPtr on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, ESMF_ArrayCreateGetUTest.F90, line 689
  PASS  Verify Array vs Array Copy (REF) shared allocation Test2, ESMF_ArrayCreateGetUTest.F90, line 593
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 696
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 600
  PASS  ArrayDestroy of Copy Test, ESMF_ArrayCreateGetUTest.F90, line 607
  PASS  ArrayCreate with 3D farrayPtr on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, ESMF_ArrayCreateGetUTest.F90, line 689
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 696
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, ESMF_ArrayCreateGetUTest.F90, line 671
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 678
  PASS  ArrayCreate from Ptr with 3D farray on 2D DistGrid Test as Ptr, ESMF_ArrayCreateGetUTest.F90, line 616
--- ESMCI::Array::print start ---
 Base name    = MyArray
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*4 / 3 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0xf0a980:
            rank = 3, typekind = 5, base_addr = 0xf0aef0
            dim[0] = 9  dim[1] = 12  dim[2] = 8  
  Real, *4, Dim 3, Data values:
(-2, 1, 3) =  -2.48124e-14
(-1, 1, 3) =  1.54872e-41
( 0, 1, 3) =  -2.48124e-14
( 1, 1, 3) =  1.54872e-41
( 2, 1, 3) =  2.21033e-38
( 3, 1, 3) =  0
( 4, 1, 3) =  2.21033e-38
( 5, 1, 3) =  0
( 6, 1, 3) =  2.21033e-38
(-2, 2, 3) =  0
  skipping to end ...
( 6,11,10) =  0
(-2,12,10) =  0
(-1,12,10) =  0
( 0,12,10) =  0
( 1,12,10) =  0
( 2,12,10) =  0
( 3,12,10) =  0
( 4,12,10) =  0
( 5,12,10) =  0
( 6,12,10) =  0
dim 1: [0]: [-2 [-2 [-2, 5] 5] 6]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
dim 3: undistLBound[0]=3            undistUBound[0]=10
--- ESMCI::Array::print end ---
  PASS  ArrayPrint for ArrayCreate from Ptr Test, ESMF_ArrayCreateGetUTest.F90, line 623
  PASS  ArrayCreate with 3D farrayPtr on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, ESMF_ArrayCreateGetUTest.F90, line 689
  PASS  ArrayGet Test, ESMF_ArrayCreateGetUTest.F90, line 630
  PASS  Deallocate returned pointer Test, ESMF_ArrayCreateGetUTest.F90, line 637
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 696
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 644
  PASS  ArrayCreate with 3D farray on 2D DistGrid Test, ESMF_ArrayCreateGetUTest.F90, line 653
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 660
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, ESMF_ArrayCreateGetUTest.F90, line 671
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 678
  PASS  ArrayCreate with 3D farrayPtr on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, ESMF_ArrayCreateGetUTest.F90, line 689
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 696
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ distgridToArrayMap Test, ESMF_ArrayCreateGetUTest.F90, line 708
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 715
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ negative computational widths Test, ESMF_ArrayCreateGetUTest.F90, line 725
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x1de2b70:
            rank = 2, typekind = 6, base_addr = 0x1de2ea0
            dim[0] = 8  dim[1] = 11  
  Real, *8, Dim 2, Data values:
( 1,13) =  2.33767e-310
( 2,13) =  2.33767e-310
( 3,13) =  4.32887e-312
( 4,13) =  4.37131e-312
( 5,13) =  4.41375e-312
( 6,13) =  4.45619e-312
( 7,13) =  4.49863e-312
( 8,13) =  4.54107e-312
( 1,14) =  4.81693e-312
( 2,14) =  5.32621e-312
  skipping to end ...
( 7,22) =  1.50269e-316
( 8,22) =  1.50758e+161
( 1,23) =  1.75631e-152
( 2,23) =  1.49005e+195
( 3,23) =  1.96098e+243
( 4,23) =  3.34378e+20
( 5,23) =  8.74485e+199
( 6,23) =  7.22941e+159
( 7,23) =  9.77635e+24
( 8,23) =  2.59339e+161
dim 1: [0]: [1 [2 [1, 8] 6] 8]
dim 2: [1]: [13 [14 [13, 23] 20] 23]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computational widths Test, ESMF_ArrayCreateGetUTest.F90, line 732
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 739
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 748
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x1de2b70:
            rank = 2, typekind = 6, base_addr = 0x1cfdee0
            dim[0] = 8  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 1,13) =  2.33767e-310
( 2,13) =  2.33767e-310
( 3,13) =  1.45913e-152
( 4,13) =  2.59345e+161
( 5,13) =  3.01254e-153
( 6,13) =  5.03494e+175
( 7,13) =  8.89487e+252
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ distgridToArrayMap Test, ESMF_ArrayCreateGetUTest.F90, line 708
( 8,13) =  2.32512e+242
( 1,14) =  1.75567e+97
( 2,14) =  3.17089e+64
  skipping to end ...
( 7,23) =  12
( 8,23) =  12
( 1,24) =  12
( 2,24) =  12
( 3,24) =  3.16202e-322
( 4,24) =  2.37152e-322
( 5,24) =  1.50287e-316
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 715
( 6,24) =  5.28556e+180
( 7,24) =  8.8876e+252
( 8,24) =  7.4564e+247
dim 1: [0]: [1 [1 [1, 8] 8] 8]
dim 2: [1]: [13 [13 [13, 23] 24] 24]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 755
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ negative computational widths Test, ESMF_ArrayCreateGetUTest.F90, line 725
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 768
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 778
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 787
~ local data in LocalArray for DE 1 ~
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ distgridToArrayMap Test, ESMF_ArrayCreateGetUTest.F90, line 708
LocalArrayPrint: Array at address 0x1733bc0:
            rank = 2, typekind = 6, base_addr = 0x1733ef0
            dim[0] = 7  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 9, 1) =  2.35685e-310
(10, 1) =  2.35685e-310
(11, 1) =  0
(12, 1) =  0
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 715
(13, 1) =  9.86728e-312
(14, 1) =  9.90972e-312
(15, 1) =  9.95216e-312
( 9, 2) =  9.9946e-312
(10, 2) =  1.0037e-311
(11, 2) =  1.00795e-311
  skipping to end ...
(13,11) =  3.75593e-312
(14,11) =  3.79837e-312
(15,11) =  3.84081e-312
( 9,12) =  3.88325e-312
(10,12) =  3.92569e-312
(11,12) =  3.96813e-312
(12,12) =  4.01057e-312
(13,12) =  4.05301e-312
(14,12) =  4.09545e-312
(15,12) =  4.13789e-312
dim 1: [0]: [9 [10 [9, 15] 13] 15]
dim 2: [1]: [1 [2 [1, 12] 9] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computational widths Test, ESMF_ArrayCreateGetUTest.F90, line 732
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ negative computational widths Test, ESMF_ArrayCreateGetUTest.F90, line 725
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 739
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0xe87920:
            rank = 2, typekind = 6, base_addr = 0xe87c50
            dim[0] = 8  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 1, 1) =  2.34537e-310
( 2, 1) =  2.34537e-310
( 3, 1) =  0
( 4, 1) =  0
( 5, 1) =  1.35171e-311
( 6, 1) =  1.35596e-311
( 7, 1) =  1.3602e-311
( 8, 1) =  1.36444e-311
( 1, 2) =  1.36869e-311
( 2, 2) =  1.37293e-311
  skipping to end ...
( 7,11) =  2.10714e-311
( 8,11) =  2.11139e-311
( 1,12) =  2.31934e-311
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 748
( 2,12) =  2.32359e-311
( 3,12) =  2.32783e-311
( 4,12) =  2.33207e-311
( 5,12) =  2.33632e-311
( 6,12) =  2.34056e-311
( 7,12) =  2.34481e-311
( 8,12) =  2.34905e-311
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
dim 1: [0]: [1 [2 [1, 8] 6] 8]
dim 2: [1]: [1 [2 [1, 12] 9] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computational widths Test, ESMF_ArrayCreateGetUTest.F90, line 732
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 797
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 739
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x17b3000:
            rank = 2, typekind = 6, base_addr = 0x1733bc0
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
            dim[0] = 7  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 9, 1) =  2.35685e-310
(10, 1) =  2.35685e-310
(11, 1) =  1.20202e-316
(12, 1) =  1.20202e-316
(13, 1) =  0
(14, 1) =  1.9098e-313
(15, 1) =  2.122e-314
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
( 9, 2) =  2.122e-314
(10, 2) =  2.122e-314
(11, 2) =  2.54639e-313
  skipping to end ...
(13,11) =  6.72673e-312
(14,11) =  6.76917e-312
(15,11) =  6.81161e-312
LocalArrayPrint: Array at address 0x1de2b70:
            rank = 2, typekind = 6, base_addr = 0x1de4580
            dim[0] = 12  dim[1] = 17  
  Real, *8, Dim 2, Data values:
( 9,12) =  6.85405e-312
(10,12) =  6.89649e-312
(11,12) =  6.93893e-312
(12,12) =  6.98137e-312
(13,12) =  7.02381e-312
( 0,11) =  2.33767e-310
( 1,11) =  2.33767e-310
( 2,11) =  1.5486e-316
( 3,11) =  1.5486e-316
( 4,11) =  1.8159e-152
( 5,11) =  1.69899e+36
( 6,11) =  9.78348e+24
(14,12) =  7.06625e-312
(15,12) =  7.10869e-312
dim 1: [0]: [9 [9 [9, 15] 13] 15]
dim 2: [1]: [1 [2 [1, 12] 12] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 755
( 7,11) =  5.30971e+06
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 748
( 8,11) =  2.17657e+59
( 9,11) =  1.5319e-94
  skipping to end ...
( 2,27) =  1.75631e-152
( 3,27) =  1.49005e+195
( 4,27) =  1.96098e+243
( 5,27) =  3.34378e+20
( 6,27) =  8.74485e+199
( 7,27) =  7.22941e+159
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
( 8,27) =  9.77635e+24
( 9,27) =  2.59339e+161
(10,27) =  8.9119e+35
(11,27) =  6.57947e-85
dim 1: [0]: [0 [1 [1, 8] 8] 11]
dim 2: [1]: [11 [13 [13, 23] 24] 27]
--- ESMCI::Array::print end ---
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 768
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 804
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0xf0c760:
            rank = 2, typekind = 6, base_addr = 0xf0ca90
            dim[0] = 8  dim[1] = 12  
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 778
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ distgridToArrayMap Test, ESMF_ArrayCreateGetUTest.F90, line 708
  Real, *8, Dim 2, Data values:
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 715
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 787
( 1, 1) =  2.34537e-310
( 2, 1) =  2.34537e-310
( 3, 1) =  0
( 4, 1) =  0
( 5, 1) =  1.03766e-311
( 6, 1) =  1.0419e-311
( 7, 1) =  1.04614e-311
( 8, 1) =  1.05039e-311
( 1, 2) =  1.05463e-311
( 2, 2) =  1.05888e-311
  skipping to end ...
( 7,11) =  0
( 8,11) =  0
( 1,12) =  0
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 816
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 824
( 2,12) =  0
( 3,12) =  0
( 4,12) =  0
( 5,12) =  0
( 6,12) =  0
( 7,12) =  0
  PASS  Check total bounds for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 842
( 8,12) =  0
dim 1: [0]: [1 [1 [1, 8] 8] 8]
dim 2: [1]: [1 [2 [1, 12] 12] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 755
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ negative computational widths Test, ESMF_ArrayCreateGetUTest.F90, line 725
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 855
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 768
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 778
~ local data in LocalArray for DE 3 ~
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 787
LocalArrayPrint: Array at address 0x1089b90:
            rank = 2, typekind = 6, base_addr = 0x108a380
            dim[0] = 7  dim[1] = 11  
  Real, *8, Dim 2, Data values:
( 9,13) =  2.35952e-310
(10,13) =  2.35952e-310
(11,13) =  8.56875e-317
  PASS  Create test Array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90, line 864
(12,13) =  8.56875e-317
(13,13) =  4.24399e-313
(14,13) =  4.66839e-313
(15,13) =  5.09279e-313
( 9,14) =  5.51719e-313
(10,14) =  5.94159e-313
(11,14) =  6.36599e-313
  skipping to end ...
(13,22) =  2.97079e-313
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_PET Test, ESMF_ArrayCreateGetUTest.F90, line 871
(14,22) =  3.39519e-313
(15,22) =  3.81959e-313
( 9,23) =  4.24399e-313
(10,23) =  4.66839e-313
(11,23) =  5.09279e-313
(12,23) =  5.51719e-313
(13,23) =  5.94159e-313
(14,23) =  6.36599e-313
(15,23) =  6.79039e-313
dim 1: [0]: [9 [10 [9, 15] 13] 15]
dim 2: [1]: [13 [14 [13, 23] 20] 23]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computational widths Test, ESMF_ArrayCreateGetUTest.F90, line 732
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90, line 885
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 739
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 797
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x1733bc0:
            rank = 2, typekind = 6, base_addr = 0x17314d0
            dim[0] = 11  dim[1] = 18  
  Real, *8, Dim 2, Data values:
( 8,-1) =  2.35685e-310
( 9,-1) =  2.35685e-310
(10,-1) =  1.20153e-316
(11,-1) =  1.20153e-316
(12,-1) =  1.19487e-316
(13,-1) =  0
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 748
(14,-1) =  1.20153e-316
(15,-1) =  2.35687e-310
(16,-1) =  0
(17,-1) =  1.19487e-316
  skipping to end ...
( 9,16) =  0
(10,16) =  1.19487e-316
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
(11,16) =  0
(12,16) =  1.2016e-316
(13,16) =  2.35687e-310
(14,16) =  0
(15,16) =  1.19487e-316
(16,16) =  0
(17,16) =  1.20161e-316
(18,16) =  2.35687e-310
dim 1: [0]: [8 [9 [9, 15] 13] 18]
dim 2: [1]: [-1 [2 [1, 12] 12] 16]
--- ESMCI::Array::print end ---
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0x1089b90:
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 804
            rank = 2, typekind = 6, base_addr = 0x108a380
            dim[0] = 7  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 9,13) =  2.35952e-310
(10,13) =  2.35952e-310
(11,13) =  8.56875e-317
(12,13) =  8.56875e-317
(13,13) =  4.24399e-313
(14,13) =  4.66839e-313
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 797
(15,13) =  5.09279e-313
( 9,14) =  5.51719e-313
(10,14) =  5.94159e-313
(11,14) =  6.36599e-313
  skipping to end ...
(13,23) =  5.94159e-313
(14,23) =  6.36599e-313
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 816
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 824
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
(15,23) =  6.79039e-313
( 9,24) =  5.93373e-321
(10,24) =  2.35952e-310
(11,24) =  2.35952e-310
(12,24) =  8.56906e-317
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
(13,24) =  8.56906e-317
(14,24) =  9.33678e-313
(15,24) =  9.76118e-313
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0xf0c760:
  PASS  Check total bounds for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 838
dim 1: [0]: [9 [9 [9, 15] 13] 15]
dim 2: [1]: [13 [13 [13, 23] 24] 24]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 755
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 855
            rank = 2, typekind = 6, base_addr = 0xf0ca90
            dim[0] = 12  dim[1] = 18  
  Real, *8, Dim 2, Data values:
( 0,-1) =  2.34537e-310
( 1,-1) =  2.34537e-310
( 2,-1) =  7.79659e-317
( 3,-1) =  7.79659e-317
( 4,-1) =  1.03766e-311
( 5,-1) =  1.0419e-311
( 6,-1) =  1.04614e-311
( 7,-1) =  1.05039e-311
( 8,-1) =  1.05463e-311
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 768
( 9,-1) =  1.05888e-311
  skipping to end ...
( 2,16) =  0
( 3,16) =  0
( 4,16) =  0
( 5,16) =  0
( 6,16) =  0
( 7,16) =  0
( 8,16) =  0
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 778
( 9,16) =  0
(10,16) =  0
(11,16) =  0
dim 1: [0]: [0 [1 [1, 8] 8] 11]
dim 2: [1]: [-1 [2 [1, 12] 12] 16]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 804
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 787
  PASS  Create test Array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90, line 864
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_PET Test, ESMF_ArrayCreateGetUTest.F90, line 871
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 816
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 824
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90, line 885
  PASS  Check total bounds for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 834
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 855
  PASS  Create test Array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90, line 864
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_PET Test, ESMF_ArrayCreateGetUTest.F90, line 871
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 797
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90, line 885
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0x1089b90:
            rank = 2, typekind = 6, base_addr = 0xfa8260
            dim[0] = 11  dim[1] = 17  
  Real, *8, Dim 2, Data values:
( 8,11) =  2.35952e-310
( 9,11) =  2.35952e-310
(10,11) =  8.11125e-317
(11,11) =  8.11125e-317
(12,11) =  8.11128e-317
(13,11) =  8.11128e-317
(14,11) =  8.11129e-317
(15,11) =  8.11129e-317
(16,11) =  8.11129e-317
(17,11) =  8.11129e-317
  skipping to end ...
( 9,27) =  1.58101e-322
(10,27) =  8.10695e-317
(11,27) =  2.35952e-310
(12,27) =  1.92093e-320
(13,27) =  7.95446e-322
(14,27) =  8.1121e-317
(15,27) =  2.35952e-310
(16,27) =  1.93674e-320
(17,27) =  6.37345e-322
(18,27) =  8.1121e-317
dim 1: [0]: [8 [9 [9, 15] 13] 18]
dim 2: [1]: [11 [13 [13, 23] 24] 27]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 804
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 816
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 824
  PASS  Check total bounds for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 846
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 855
  PASS  Create test Array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90, line 864
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_PET Test, ESMF_ArrayCreateGetUTest.F90, line 871
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90, line 885
  PASS  Create test Array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 895
  PASS  Create test Array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 895
  PASS  Create test Array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 895
  PASS  Create test Array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 895
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 907
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 907
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 907
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 907
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 925
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 925
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 925
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 925
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 944
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 944
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 944
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 944
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 966
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 966
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 966
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 966
  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 979
  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 979
  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 979
  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 979
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 1009
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 1009
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 1009
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 1009
  PASS  ArrayCreate from Copy (REF), ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 1023
  PASS  ArrayCreate from Copy (REF), ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 1023
  PASS  ArrayCreate from Copy (REF), ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 1023
  PASS  ArrayCreate from Copy (REF), ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 1023
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1035
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1035
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1035
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1035
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1053
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1053
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1053
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1053
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1072
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1072
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1072
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1072
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1094
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1094
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1094
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1094
  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1107
  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1107
  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1107
  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1107
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1137
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1137
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1137
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1137
  PASS  ArrayDestroy Test for arrayCpy with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 1151
  PASS  ArrayDestroy Test for arrayCpy with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 1151
  PASS  ArrayDestroy Test for arrayCpy with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 1151
  PASS  ArrayDestroy Test for arrayCpy with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 1151
  PASS  ArrayCreate from Copy (REF), ESMF_PIN_DE_TO_SSI w/ DELayout Test, ESMF_ArrayCreateGetUTest.F90, line 1166
  PASS  ArrayCreate from Copy (REF), ESMF_PIN_DE_TO_SSI w/ DELayout Test, ESMF_ArrayCreateGetUTest.F90, line 1166
  PASS  ArrayCreate from Copy (REF), ESMF_PIN_DE_TO_SSI w/ DELayout Test, ESMF_ArrayCreateGetUTest.F90, line 1166
  PASS  ArrayCreate from Copy (REF), ESMF_PIN_DE_TO_SSI w/ DELayout Test, ESMF_ArrayCreateGetUTest.F90, line 1166
--- ESMCI::Array::print start ---
 Base name    = Array024
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
--- ESMCI::Array::print start ---
 Base name    = Array024
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
--- ESMCI::Array::print start ---
 Base name    = Array024
 Status: Base = Ready,  object = Ready
 Proxy        = no
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 0
--- ESMCI::Array::print start ---
 Base name    = Array024
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
 Root Info (Attributes):
{}DistGrid dimCount = 2
deCount = 4
localDeCount = 0
--- ESMCI::Array::print end ---
  PASS  ArrayPrint from Copy (REF), ESMF_PIN_DE_TO_SSI w/ DELayout Test, ESMF_ArrayCreateGetUTest.F90, line 1177
Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 2
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x1deb050:
--- ESMCI::Array::print end ---
  PASS  ArrayPrint from Copy (REF), ESMF_PIN_DE_TO_SSI w/ DELayout Test, ESMF_ArrayCreateGetUTest.F90, line 1177
            rank = 2, typekind = 6, base_addr = 0x2b08564bf108
            dim[0] = 8  dim[1] = 11  
  Real, *8, Dim 2, Data values:
( 1,13) =  20
( 2,13) =  20
( 3,13) =  20
( 4,13) =  20
( 5,13) =  20
( 6,13) =  20
( 7,13) =  20
( 8,13) =  20
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 2
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0xe87930:
            rank = 2, typekind = 6, base_addr = 0x2b2ca2da3108
            dim[0] = 8  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 1, 1) =  0
( 2, 1) =  0
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1185
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1185
( 1,14) =  20
( 2,14) =  20
  skipping to end ...
( 7,22) =  20
( 8,22) =  20
( 3, 1) =  0
( 4, 1) =  0
( 5, 1) =  0
( 6, 1) =  0
( 7, 1) =  0
( 8, 1) =  0
( 1,23) =  20
( 2,23) =  20
( 3,23) =  20
( 4,23) =  20
( 5,23) =  20
( 6,23) =  20
( 7,23) =  20
( 8,23) =  20
dim 1: [0]: [1 [1 [1, 8] 8] 8]
dim 2: [1]: [13 [13 [13, 23] 23] 23]
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0x1de2e50:
( 1, 2) =  0
( 2, 2) =  0
  skipping to end ...
( 7,11) =  0
( 8,11) =  0
( 1,12) =  0
( 2,12) =  0
( 3,12) =  0
( 4,12) =  0
( 5,12) =  0
( 6,12) =  0
( 7,12) =  0
( 8,12) =  0
            rank = 2, typekind = 6, base_addr = 0x2b08564c0108
            dim[0] = 7  dim[1] = 11  
  Real, *8, Dim 2, Data values:
( 9,13) =  30
(10,13) =  30
(11,13) =  30
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1204
dim 1: [0]: [1 [1 [1, 8] 8] 8]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0xe8bd90:
            rank = 2, typekind = 6, base_addr = 0x2b2ca2da4108
(12,13) =  30
(13,13) =  30
(14,13) =  30
(15,13) =  30
( 9,14) =  30
(10,14) =  30
(11,14) =  30
  skipping to end ...
(13,22) =  30
(14,22) =  30
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1204
            dim[0] = 7  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 9, 1) =  10
(10, 1) =  10
(11, 1) =  10
(12, 1) =  10
(13, 1) =  10
(14, 1) =  10
(15, 1) =  10
( 9, 2) =  10
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1236
(15,22) =  30
( 9,23) =  30
(10,23) =  30
(11,23) =  30
(12,23) =  30
(10, 2) =  10
(11, 2) =  10
  skipping to end ...
(13,23) =  30
(14,23) =  30
(15,23) =  30
dim 1: [0]: [9 [9 [9, 15] 15] 15]
dim 2: [1]: [13 [13 [13, 23] 23] 23]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint from Copy (REF), ESMF_PIN_DE_TO_SSI w/ DELayout Test, ESMF_ArrayCreateGetUTest.F90, line 1177
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1236
(13,11) =  10
(14,11) =  10
(15,11) =  10
( 9,12) =  10
(10,12) =  10
(11,12) =  10
(12,12) =  10
(13,12) =  10
(14,12) =  10
(15,12) =  10
dim 1: [0]: [9 [9 [9, 15] 15] 15]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint from Copy (REF), ESMF_PIN_DE_TO_SSI w/ DELayout Test, ESMF_ArrayCreateGetUTest.F90, line 1177
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1185
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1185
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1204
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1204
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1236
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1236
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1250
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1250
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1250
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI arrayCpy Test, ESMF_ArrayCreateGetUTest.F90, line 1250
  PASS  ArrayDestroy Test for arrayCpy with ESMF_PIN_DE_TO_SSI w/ DELayout, ESMF_ArrayCreateGetUTest.F90, line 1262
  PASS  ArrayDestroy Test for arrayCpy with ESMF_PIN_DE_TO_SSI w/ DELayout, ESMF_ArrayCreateGetUTest.F90, line 1262
  PASS  ArrayDestroy Test for arrayCpy with ESMF_PIN_DE_TO_SSI w/ DELayout, ESMF_ArrayCreateGetUTest.F90, line 1262
  PASS  ArrayDestroy Test for arrayCpy with ESMF_PIN_DE_TO_SSI w/ DELayout, ESMF_ArrayCreateGetUTest.F90, line 1262
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 1274
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 1274
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 1274
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 1274
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1296
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1296
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1296
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1296
  PASS  ArrayGet Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1303
  PASS  ArrayGet Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1303
  PASS  ArrayGet Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1303
  PASS  ArrayGet Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1303
  PASS  ArrayGet w/ incompatible Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1310
  PASS  ArrayGet w/ incompatible Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1310
  PASS  ArrayGet w/ incompatible Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1310
  PASS  ArrayGet w/ incompatible Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1310
--- ESMCI::Array::print start ---
 Base name    = Array028
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
--- ESMCI::Array::print start ---
 Base name    = Array028
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
--- ESMCI::Array::print start ---
 Base name    = Array028
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
--- ESMCI::Array::print start ---
 Base name    = Array028
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
localDeCount = 1
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 3 ~
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x1cfde90:
            rank = 1, typekind = 6, base_addr = 0x7ffcc19dd490
            dim[0] = 10  
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0xe87930:
  Real, *8, Dim 1, Data values:
( 1) =  7.14399e-315
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x1738700:
            rank = 1, typekind = 6, base_addr = 0x7fff008b3de0
LocalArrayPrint: Array at address 0xfa5ce0:
            rank = 1, typekind = 6, base_addr = 0x7fff36495510
            dim[0] = 10  
  Real, *8, Dim 1, Data values:
            rank = 1, typekind = 6, base_addr = 0x7fff6ed52260
            dim[0] = 10  
  Real, *8, Dim 1, Data values:
( 1) =  6.7776e-315
( 2) =  2.35951e-310
( 3) =  4.94066e-324
( 4) =  2.35951e-310
( 5) =  4.94066e-324
( 2) =  2.33766e-310
( 3) =  4.94066e-324
( 4) =  2.33766e-310
( 5) =  4.94066e-324
( 6) =  1.23516e-322
( 7) =  2.33766e-310
( 8) =  2.33766e-310
( 9) =  4.94066e-324
(10) =  2.33766e-310
            dim[0] = 10  
  Real, *8, Dim 1, Data values:
( 1) =  1.60668e-314
( 2) =  2.35685e-310
( 3) =  4.94066e-324
( 4) =  2.35685e-310
( 5) =  4.94066e-324
( 6) =  1.23516e-322
( 1) =  1.34898e-314
( 2) =  2.34536e-310
( 3) =  4.94066e-324
( 4) =  2.34536e-310
( 5) =  4.94066e-324
( 6) =  1.23516e-322
( 7) =  2.34536e-310
( 8) =  2.34536e-310
( 9) =  4.94066e-324
( 7) =  2.35685e-310
( 8) =  2.35685e-310
( 9) =  4.94066e-324
(10) =  2.35685e-310
( 6) =  1.23516e-322
( 7) =  2.35951e-310
( 8) =  2.35951e-310
( 9) =  4.94066e-324
(10) =  2.35951e-310
dim 1: [0]: [1 [1 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
dim 1: [0]: [1 [1 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1317
(10) =  2.34536e-310
dim 1: [0]: [1 [1 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1317
dim 1: [0]: [1 [1 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1324
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1324
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1317
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1317
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1324
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1324
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 1333
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 1333
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 1333
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 1333
--- ESMCI::Array::print start ---
 Base name    = Array029
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
--- ESMCI::Array::print start ---
 Base name    = Array029
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
--- ESMCI::Array::print start ---
 Base name    = Array029
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
--- ESMCI::Array::print start ---
 Base name    = Array029
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 1 
localDeCount = 1
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x1dea230:
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x1738700:
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0xfa5ce0:
            rank = 1, typekind = 6, base_addr = 0x7fff36495510
            rank = 1, typekind = 6, base_addr = 0x7ffcc19dd490
            dim[0] = 10  
  Real, *8, Dim 1, Data values:
( 1) =  7.14399e-315
( 2) =  2.33766e-310
( 3) =  4.94066e-324
( 4) =  2.33766e-310
( 5) =  4.94066e-324
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0xe8c720:
            rank = 1, typekind = 6, base_addr = 0x7fff6ed52260
            dim[0] = 10  
  Real, *8, Dim 1, Data values:
( 1) =  1.34898e-314
( 6) =  1.23516e-322
( 7) =  2.33766e-310
( 8) =  2.33766e-310
            rank = 1, typekind = 6, base_addr = 0x7fff008b3de0
            dim[0] = 10  
  Real, *8, Dim 1, Data values:
            dim[0] = 10  
  Real, *8, Dim 1, Data values:
( 1) =  6.7776e-315
( 2) =  2.34536e-310
( 3) =  4.94066e-324
( 4) =  2.34536e-310
( 2) =  2.35951e-310
( 3) =  4.94066e-324
( 4) =  2.35951e-310
( 5) =  4.94066e-324
( 6) =  1.23516e-322
( 7) =  2.35951e-310
( 9) =  4.94066e-324
(10) =  2.33766e-310
dim 1: [0]: [1 [1 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 1340
( 1) =  1.60668e-314
( 2) =  2.35685e-310
( 3) =  4.94066e-324
( 4) =  2.35685e-310
( 5) =  4.94066e-324
( 6) =  1.23516e-322
( 7) =  2.35685e-310
( 5) =  4.94066e-324
( 6) =  1.23516e-322
( 7) =  2.34536e-310
( 8) =  2.34536e-310
( 9) =  4.94066e-324
(10) =  2.34536e-310
( 8) =  2.35685e-310
( 9) =  4.94066e-324
(10) =  2.35685e-310
dim 1: [0]: [1 [1 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 1340
( 8) =  2.35951e-310
( 9) =  4.94066e-324
(10) =  2.35951e-310
dim 1: [0]: [1 [1 [1, 10] 9] 10]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 1340
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1347
dim 1: [0]: [1 [2 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 1340
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1347
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1347
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1347
  PASS  ArrayCreate AssmdShape 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1366
  PASS  ArrayCreate AssmdShape 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1366
  PASS  ArrayCreate AssmdShape 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1366
  PASS  ArrayCreate AssmdShape 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1366
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1373
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1373
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1373
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1373
  PASS  ArrayGet w/ incompatible Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1380
  PASS  ArrayGet w/ incompatible Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1380
  PASS  ArrayGet w/ incompatible Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1380
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1387
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1387
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1387
  PASS  ArrayGet w/ incompatible Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 1380
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1387
  PASS  ArrayCreate AssmdShape 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTest.F90, line 1406
  PASS  ArrayCreate AssmdShape 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTest.F90, line 1406
  PASS  ArrayCreate AssmdShape 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTest.F90, line 1406
  PASS  ArrayGet Fortran array pointer, 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTest.F90, line 1413
  PASS  ArrayGet Fortran array pointer, 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTest.F90, line 1413
  PASS  ArrayGet Fortran array pointer, 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTest.F90, line 1413
  PASS  ArrayCreate AssmdShape 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTest.F90, line 1406
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1420
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1420
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1420
  PASS  ArrayGet Fortran array pointer, 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTest.F90, line 1413
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1420
  PASS  ArrayCreate AssmdShape 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTest.F90, line 1439
  PASS  ArrayCreate AssmdShape 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTest.F90, line 1439
  PASS  ArrayCreate AssmdShape 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTest.F90, line 1439
  PASS  ArrayCreate AssmdShape 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTest.F90, line 1439
  PASS  ArrayGet Fortran array pointer, 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTest.F90, line 1446
  PASS  ArrayGet Fortran array pointer, 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTest.F90, line 1446
  PASS  ArrayGet Fortran array pointer, 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTest.F90, line 1446
  PASS  ArrayGet Fortran array pointer, 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTest.F90, line 1446
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1453
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1453
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1453
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1453
  PASS  Create test Array for extra edge element test, ESMF_ArrayCreateGetUTest.F90, line 1514
  PASS  Create test Array for extra edge element test, ESMF_ArrayCreateGetUTest.F90, line 1514
  PASS  Create test Array for extra edge element test, ESMF_ArrayCreateGetUTest.F90, line 1514
  PASS  Create test Array for extra edge element test, ESMF_ArrayCreateGetUTest.F90, line 1514
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1543
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1543
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1543
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1543
  PASS  Create Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1562
  PASS  Create Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1562
  PASS  Create Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1562
--- ESMCI::Array::print start ---
 Base name    = MyArray
 Status: Base = Ready,  object = Ready
--- ESMCI::Array::print start ---
 Base name    = MyArray
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
--- ESMCI::Array::print start ---
 Base name    = MyArray
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
  PASS  Create Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1562
 Proxy        = no
 Root Info (Attributes):
{}--- ESMCI::Array::print start ---
 Base name    = MyArray
 Status: Base = Ready,  object = Ready
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 1
localDeCount = 0
--- ESMCI::Array::print end ---
Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 1
localDeCount = 0
--- ESMCI::Array::print end ---
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 1
localDeCount = 0
--- ESMCI::Array::print end ---
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 1
localDeCount = 1
~ local data in LocalArray for DE 0 ~
  PASS  ArrayPrint Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1569
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1576
LocalArrayPrint: Array at address 0xf0b490:
            rank = 1, typekind = 6, base_addr = 0xf04dd0
            dim[0] = 4  
  PASS  ArrayPrint Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1569
  PASS  ArrayPrint Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1569
  Real, *8, Dim 1, Data values:
( 1) =  7.78078e-317
( 2) =  6.32404e-322
( 3) =  0
( 4) =  0
dim 1: [0]: [1 [1 [1, 4] 4] 4]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1569
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1576
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1576
  PASS  Create Array on single DE DistGrid with Fortran allocation, ESMF_ArrayCreateGetUTest.F90, line 1592
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1576
  PASS  Create Array on single DE DistGrid with Fortran allocation, ESMF_ArrayCreateGetUTest.F90, line 1592
  PASS  Create Array on single DE DistGrid with Fortran allocation, ESMF_ArrayCreateGetUTest.F90, line 1592
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1599
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1599
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1599
  PASS  Create Array on single DE DistGrid with Fortran allocation, ESMF_ArrayCreateGetUTest.F90, line 1592
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1599
  PASS  Create Array on 4 DE DistGrid with only DE 0 elements, with Fortran allocation, ESMF_ArrayCreateGetUTest.F90, line 1627
  PASS  Create Array on 4 DE DistGrid with only DE 0 elements, with Fortran allocation, ESMF_ArrayCreateGetUTest.F90, line 1627
  PASS  Create Array on 4 DE DistGrid with only DE 0 elements, with Fortran allocation, ESMF_ArrayCreateGetUTest.F90, line 1627
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1634
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1634
  Ending Test, file ESMF_ArrayCreateGetUTest.F90, line 1644
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1634
  Ending Test, file ESMF_ArrayCreateGetUTest.F90, line 1644
  Ending Test, file ESMF_ArrayCreateGetUTest.F90, line 1644
  PASS  Create Array on 4 DE DistGrid with only DE 0 elements, with Fortran allocation, ESMF_ArrayCreateGetUTest.F90, line 1627
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1634
  Ending Test, file ESMF_ArrayCreateGetUTest.F90, line 1644
  PET           0  Test Elapsed Time    25.348999999999997       msec.
  PET           2  Test Elapsed Time    25.952999999999989       msec.
  PET           3  Test Elapsed Time    25.440000000000005       msec.
  PET           1  Test Elapsed Time    26.950999999999990       msec.
